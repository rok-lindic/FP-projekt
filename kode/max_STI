from itertools import combinations
from sage.graphs.graph_generators import graphs

def sigma_tot(graf):
    sigma_tot = 0
    stopnje = graf.degree_sequence()
    for vozlisce, nadaljne in combinations(range(len(stopnje)), 2):
        sigma_tot += (stopnje[vozlisce] - stopnje[nadaljne])^2
    return sigma_tot

rezultati = {}
for j in range(3, 8):
     grafi = graphs(j, augment="vertices")
     seznam = {}
     for i in grafi:
         st = sigma_tot(i)
         seznam.setdefault(st, []).append([i.degree_sequence(), i.to_dictionary()])
     max_kljuc = max(seznam.keys())
     vrednost_max_kljuca = seznam[max_kljuc]
     rezultati.setdefault((j, max_kljuc), []).append(vrednost_max_kljuca)
     
rezultati

# rezultat:
# {(3,
  2): [[[[1, 1, 0], {0: [2], 1: [], 2: [0]}],
   [[2, 1, 1], {0: [2], 1: [2], 2: [0, 1]}]]],
 (4,
  12): [[[[3, 1, 1, 1], {0: [3], 1: [3], 2: [3], 3: [0, 1, 2]}],
   [[2, 2, 2, 0], {0: [2, 3], 1: [], 2: [0, 3], 3: [0, 2]}]]],
 (5,
  36): [[[[4, 1, 1, 1, 1], {0: [4], 1: [4], 2: [4], 3: [4], 4: [0, 1, 2, 3]}],
   [[3, 3, 3, 3, 0],
    {0: [2, 3, 4], 1: [], 2: [0, 3, 4], 3: [0, 2, 4], 4: [0, 2, 3]}]]],
 (6,
  80): [[[[5, 1, 1, 1, 1, 1],
    {0: [5], 1: [5], 2: [5], 3: [5], 4: [5], 5: [0, 1, 2, 3, 4]}],
   [[4, 4, 4, 4, 4, 0],
    {0: [2, 3, 4, 5],
     1: [],
     2: [0, 3, 4, 5],
     3: [0, 2, 4, 5],
     4: [0, 2, 3, 5],
     5: [0, 2, 3, 4]}]]],
 (7,
  160): [[[[6, 6, 2, 2, 2, 2, 2],
    {0: [5, 6],
     1: [5, 6],
     2: [5, 6],
     3: [5, 6],
     4: [5, 6],
     5: [0, 1, 2, 3, 4, 6],
     6: [0, 1, 2, 3, 4, 5]}],
   [[4, 4, 4, 4, 4, 0, 0],
    {0: [3, 4, 5, 6],
     1: [],
     2: [],
     3: [0, 4, 5, 6],
     4: [0, 3, 5, 6],
     5: [0, 3, 4, 6],
     6: [0, 3, 4, 5]}]]]}
